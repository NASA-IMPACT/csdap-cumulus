{
  "Comment": "Discovers new Granules from a given provider",
  "TimeoutSeconds": 5184000,
  "StartAt": "RuleEnabled?",
  "States": {
    "RuleEnabled?": {
      "Comment": "Require that the rule that triggered the workflow is 'ENABLED', otherwise skip the workflow",
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.meta.rule.state",
              "IsPresent": true
            },
            {
              "Variable": "$.meta.rule.state",
              "StringEquals": "ENABLED"
            }
          ],
          "Next": "Try"
        }
      ],
      "Default": "SkipWorkflow"
    },
    "Try": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "FormatProviderPath",
          "States": {
            "FormatProviderPath": {
              "Parameters": {
                "cma": {
                  "event.$": "$",
                  "ReplaceConfig": {
                    "MaxSize": 4096,
                    "Path": "$.payload",
                    "TargetPath": "$.payload"
                  },
                  "task_config": {
                    "providerPathFormat": "{$.meta.providerPathFormat}",
                    "startDate": "{$.meta.startDate}",
                    "endDate": "{$.meta.endDate}",
                    "step": "{$.meta.step}",
                    "cumulus_message": {
                      "outputs": [
                        {
                          "source": "{$}",
                          "destination": "{$.meta.providerPath}"
                        }
                      ]
                    }
                  }
                }
              },
              "Type": "Task",
              "Resource": "${format_provider_path_task_arn}",
              "Next": "DiscoverGranules"
            },
            "DiscoverGranules": {
              "Parameters": {
                "cma": {
                  "event.$": "$",
                  "ReplaceConfig": {
                    "MaxSize": 4096,
                    "Path": "$.payload",
                    "TargetPath": "$.payload"
                  },
                  "task_config": {
                    "provider": "{$.meta.provider}",
                    "provider_path": "{$.meta.providerPath}",
                    "collection": "{$.meta.collection}",
                    "buckets": "{$.meta.buckets}",
                    "stack": "{$.meta.stack}",
                    "duplicateGranuleHandling": "{$.meta.collection.duplicateHandling}"
                  }
                }
              },
              "Type": "Task",
              "Resource": "${discover_granules_activity_id}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "DiscoverOnly?"
            },
            "DiscoverOnly?": {
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.meta.discoverOnly",
                      "IsPresent": true
                    },
                    {
                      "Variable": "$.meta.discoverOnly",
                      "BooleanEquals": true
                    }
                  ],
                  "Next": "AdvanceStartDate"
                }
              ],
              "Default": "QueueGranules"
            },
            "QueueGranules": {
              "Parameters": {
                "cma": {
                  "event.$": "$",
                  "ReplaceConfig": {
                    "MaxSize": 4096,
                    "Path": "$.payload",
                    "TargetPath": "$.payload"
                  },
                  "task_config": {
                    "queueUrl": "${background_job_queue_url}",
                    "preferredQueueBatchSize": 5,
                    "provider": "{$.meta.provider}",
                    "internalBucket": "{$.meta.buckets.internal.name}",
                    "stackName": "{$.meta.stack}",
                    "granuleIngestWorkflow": "${ingest_granule_workflow_name}",
                    "childWorkflowMeta": {}
                  }
                }
              },
              "Type": "Task",
              "Resource": "${queue_granules_activity_id}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "AdvanceStartDate"
            },
            "AdvanceStartDate": {
              "Parameters": {
                "cma": {
                  "event.$": "$",
                  "ReplaceConfig": {
                    "MaxSize": 4096,
                    "Path": "$.payload",
                    "TargetPath": "$.payload"
                  },
                  "task_config": {
                    "providerPathFormat": "{$.meta.providerPathFormat}",
                    "startDate": "{$.meta.startDate}",
                    "endDate": "{$.meta.endDate}",
                    "step": "{$.meta.step}",
                    "cumulus_message": {
                      "outputs": [
                        {
                          "source": "{$}",
                          "destination": "{$.meta.startDate}"
                        }
                      ]
                    }
                  }
                }
              },
              "Type": "Task",
              "Resource": "${advance_start_date_task_arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "DiscoverMoreGranules?"
            },
            "DiscoverMoreGranules?": {
              "Comment": "If the start date is updated, attempt further discovery",
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.meta.startDate",
                      "IsPresent": true
                    },
                    {
                      "Variable": "$.meta.startDate",
                      "IsString": true
                    }
                  ],
                  "Next": "FormatProviderPath"
                }
              ],
              "Default": "Finish"
            },
            "Finish": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Failed",
          "ResultPath": "$.exception"
        }
      ],
      "OutputPath": "$[0]",
      "End": true
    },
    "SkipWorkflow": {
      "Type": "Pass",
      "End": true
    },
    "Failed": {
      "Type": "Fail",
      "Cause": "Workflow failed"
    }
  }
}
