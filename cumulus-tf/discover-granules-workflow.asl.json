{
  "Comment": "Discovers new Granules from a given provider",
  "TimeoutSeconds": 18000,
  "StartAt": "RuleEnabled?",
  "States": {
    "RuleEnabled?": {
      "Comment": "Require that the rule that triggered the workflow is 'ENABLED', otherwise skip the workflow",
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.meta.rule.state",
              "IsPresent": true
            },
            {
              "Variable": "$.meta.rule.state",
              "StringEquals": "ENABLED"
            }
          ],
          "Next": "Try"
        }
      ],
      "Default": "SkipWorkflow"
    },
    "Try": {
      "Type": "Parallel",
      "Branches": [
        {
          "StartAt": "DiscoverGranules",
          "States": {
            "DiscoverGranules": {
              "Parameters": {
                "cma": {
                  "event.$": "$",
                  "ReplaceConfig": {
                    "MaxSize": 4096,
                    "Path": "$.payload",
                    "TargetPath": "$.payload"
                  },
                  "task_config": {
                    "provider": "{$.meta.provider}",
                    "provider_path": "{$.meta.provider_path}",
                    "collection": "{$.meta.collection}",
                    "buckets": "{$.meta.buckets}",
                    "stack": "{$.meta.stack}",
                    "duplicateGranuleHandling": "{$.meta.collection.duplicateHandling}"
                  }
                }
              },
              "Type": "Task",
              "Resource": "${discover_granules_task_arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "Next": "DryRun?"
            },
            "DryRun?": {
              "Comment": "If this is a dry run, then skip queuing granules",
              "Type": "Choice",
              "Choices": [
                {
                  "And": [
                    {
                      "Variable": "$.meta.dryRun",
                      "IsPresent": true
                    },
                    {
                      "Variable": "$.meta.dryRun",
                      "BooleanEquals": true
                    }
                  ],
                  "Next": "SkipQueue"
                }
              ],
              "Default": "QueueGranules"
            },
            "QueueGranules": {
              "Parameters": {
                "cma": {
                  "event.$": "$",
                  "ReplaceConfig": {
                    "FullMessage": true
                  },
                  "task_config": {
                    "queueUrl": "${start_sf_queue_url}",
                    "provider": "{$.meta.provider}",
                    "internalBucket": "{$.meta.buckets.internal.name}",
                    "stackName": "{$.meta.stack}",
                    "granuleIngestWorkflow": "${ingest_granule_workflow_name}",
                    "childWorkflowMeta": {
                      "staticValue": "aStaticValue",
                      "interpolatedValueStackName": "{$.meta.stack}"
                    }
                  }
                }
              },
              "Type": "Task",
              "Resource": "${queue_granules_task_arn}",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ],
              "End": true
            },
            "SkipQueue": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Failed",
          "ResultPath": "$.exception"
        }
      ],
      "End": true
    },
    "SkipWorkflow": {
      "Type": "Pass",
      "End": true
    },
    "Failed": {
      "Type": "Fail",
      "Cause": "Workflow failed"
    }
  }
}
